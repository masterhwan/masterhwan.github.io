<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://masterhwan.github.io/"/>
  <updated>2018-08-25T12:26:12.000Z</updated>
  <id>https://masterhwan.github.io/</id>
  
  <author>
    <name>Won.S.H</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>email authorization</title>
    <link href="https://masterhwan.github.io/2018/08/25/email-authorization/"/>
    <id>https://masterhwan.github.io/2018/08/25/email-authorization/</id>
    <published>2018-08-25T12:22:46.000Z</published>
    <updated>2018-08-25T12:26:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>스터디 프로젝트에서 이메일 인증 기능이 있어서 내가 했다.<br>언제 적용할지는 미지수<br><a href="https://github.com/be4ter/sts-projects/tree/gmail-auth-with-gsmpt" target="_blank" rel="noopener">github에서 구경하기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;스터디 프로젝트에서 이메일 인증 기능이 있어서 내가 했다.&lt;br&gt;언제 적용할지는 미지수&lt;br&gt;&lt;a href=&quot;https://github.com/be4ter/sts-projects/tree/gmail-auth-with-gsmpt&quot; target=&quot;_
      
    
    </summary>
    
      <category term="gsmpt" scheme="https://masterhwan.github.io/categories/gsmpt/"/>
    
      <category term="email" scheme="https://masterhwan.github.io/categories/gsmpt/email/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx 와 Tomcat</title>
    <link href="https://masterhwan.github.io/2018/08/11/nginx-and-tomcat/"/>
    <id>https://masterhwan.github.io/2018/08/11/nginx-and-tomcat/</id>
    <published>2018-08-11T14:06:15.000Z</published>
    <updated>2018-08-11T14:45:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>웹 서버(Web Sever 이하 ws)  웹 어플리케이션 서버(Web Application Server 이하 was)가 있다 비슷하지만 다르다</p><p>ws가 없더라고 was 로 만으로 웹 서비스가 가능하지만 was가 하는 일이 많아 질 수록 느려진다. 할일을 나누기 위해서 </p><p>ws 와 was 계층 구조로 나뉜다</p><p>ws는 정적인 작업을 처리하고 was는 동적인 작업을 처리한다.</p><p>client 요청 -&gt; ws -&gt; was -&gt; ws -&gt; 응답 client</p><p>nginx는 ws이고 tomcat은 was 니깐 tomcat 여러가 실행해야지</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;웹 서버(Web Sever 이하 ws)  웹 어플리케이션 서버(Web Application Server 이하 was)가 있다 비슷하지만 다르다&lt;/p&gt;
&lt;p&gt;ws가 없더라고 was 로 만으로 웹 서비스가 가능하지만 was가 하는 일이 많아 질 수록
      
    
    </summary>
    
    
      <category term="was" scheme="https://masterhwan.github.io/tags/was/"/>
    
      <category term="ws" scheme="https://masterhwan.github.io/tags/ws/"/>
    
  </entry>
  
  <entry>
    <title>xUnit</title>
    <link href="https://masterhwan.github.io/2018/08/08/xUnit/"/>
    <id>https://masterhwan.github.io/2018/08/08/xUnit/</id>
    <published>2018-08-08T06:21:55.000Z</published>
    <updated>2018-08-11T12:47:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>프로그래밍 언어마다 테스트 자동화 프레임워크가 있다.<br>유명한 것 중 하나가 자바의 Junit<br>처럼 xunit 시리즈가 있다.</p><p>그래서 나도 xunit해보기로 함</p><p>reflection 이라는 개념이 나온다.<br>첫번째 그냥 따라 해봤는데 실패</p><p>다시 도전</p><p>출처에 있는 예제를 여러번 따라하다보니 감이 오긴한다.<br>그래도 아직은 잘 모르겠다.</p><p>그래도 자바의 리플렉션이 하는 역할에 대해 공부했다.</p><p>리플렉션은 구체적인 클래스타입을 알지 못해도 해당 클래스의 필드, 메소드등에 접근 할수 있도록 하는 API</p><p>출처<br><a href="http://jojoldu.tistory.com/231" target="_blank" rel="noopener">http://jojoldu.tistory.com/231</a><br><a href="http://whiteship.tistory.com/1866" target="_blank" rel="noopener">http://whiteship.tistory.com/1866</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;프로그래밍 언어마다 테스트 자동화 프레임워크가 있다.&lt;br&gt;유명한 것 중 하나가 자바의 Junit&lt;br&gt;처럼 xunit 시리즈가 있다.&lt;/p&gt;
&lt;p&gt;그래서 나도 xunit해보기로 함&lt;/p&gt;
&lt;p&gt;reflection 이라는 개념이 나온다.&lt;br&gt;첫
      
    
    </summary>
    
      <category term="TDD" scheme="https://masterhwan.github.io/categories/TDD/"/>
    
    
  </entry>
  
  <entry>
    <title>알바 후기</title>
    <link href="https://masterhwan.github.io/2018/08/04/part-time-review/"/>
    <id>https://masterhwan.github.io/2018/08/04/part-time-review/</id>
    <published>2018-08-04T13:46:49.000Z</published>
    <updated>2018-08-04T14:07:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>알바 소개 받고 문제점에 대해 공부 해서 갔다.<br>xss공격에대해 나도 몰라서 내가 만든 게시판 같은데에 시도해보고 대응책을 적용해봐서 잘 되서<br>그곳에서도 잘 될 줄알았는데 불행의 시작이었다.</p><p>난 지금까지 스프링 프레임워크로 개발 해왔지 그냥 톰켓에 웹서버 올린 것 보고 놀랬다… -&gt; 나중에 물어보니 모델 2 방식이라고 하셨다 ㅎㅎ;..<br>뭐 저건 그러려니 하고 넘어갔는데<br>테스트 페이지가 없다. 서비스 홈페이지는 잘들어 가지는데 테스트 페이지가 없다니… 그래서 여기서 2차맨붕 -&gt; 내가 잘못 생각하고 있던거 같다<br> 악성 url 새로고침 마구하니깐 뚫리던데 localhost:8080에서는 시도를 안해봤던거 같다. 그냥 404에러 페이지만 떠서 넘어갔는데(기본 404 응답페이지가<br> 아니라 이 회사 예외 페이지)<br>그래도 톰켓이 돌아가는 서비스 환경에 원격으로 접속 할 수 있었다.<br>여기서 내가 jsp파일을 하나 하나씩 수정하고 있었는데.. 관리자 분께서 홈페이지 에러가 난다고 하셨다. 그래서 내가 작업했던 파일들을 원래 파일로<br>복원하고 내가 원인을 잘못 파악했고 나는 할 수 없다고 말씀드리고 나왔다.</p><p>ㅋㅋ 처음에 모두 모여있는데서 테스트로 문제해결한거 보고 내 자신감도 하늘을 찌르고 별거 아니네라고 생각했는데<br>바로 자신감은 하늘로 떨어졌다. 너무 부끄럽고 관계자 분들 께 죄송했다.<br>내가 진짜 여기 일을 잘 할수 있을지 걱정이 앞 선다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;알바 소개 받고 문제점에 대해 공부 해서 갔다.&lt;br&gt;xss공격에대해 나도 몰라서 내가 만든 게시판 같은데에 시도해보고 대응책을 적용해봐서 잘 되서&lt;br&gt;그곳에서도 잘 될 줄알았는데 불행의 시작이었다.&lt;/p&gt;
&lt;p&gt;난 지금까지 스프링 프레임워크로
      
    
    </summary>
    
      <category term="한탄" scheme="https://masterhwan.github.io/categories/%ED%95%9C%ED%83%84/"/>
    
    
  </entry>
  
  <entry>
    <title>xss 공격에 대응하기</title>
    <link href="https://masterhwan.github.io/2018/08/01/xss-defence/"/>
    <id>https://masterhwan.github.io/2018/08/01/xss-defence/</id>
    <published>2018-08-01T07:12:47.000Z</published>
    <updated>2018-08-01T10:43:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>운 좋게 유지 보수 일을 하게 됬는데 </p><p>크로스 사이트 스크립팅 공격을 예방 해줘야 한다고 한다.</p><p>그래서</p><p><a href="http://www.kisa.or.kr/uploadfile/201312/201312161355109566.pdf" target="_blank" rel="noopener">http://www.kisa.or.kr/uploadfile/201312/201312161355109566.pdf</a></p><p>이 문서를 한 번 보니깐 몇 가지 대응 방법이 있다.</p><ol><li><p>입・출력 값 검증 및 무효화<br>일일히 해주라는 건데 너무 힘들다<br> 그래서 도와주는 라이브러리가 있다.</p></li><li><p>OWASP ESAPI 라이브러리<br> 이 소개 됬던데 유지보수가 안되는거 같다.</p></li><li><p>기타 xss filter<br> 중에서 네이버에서 만든 lucy-xss-filter를 사용해 볼 계획이다.</p></li></ol><p><img src="https://github.com/masterhwan/masterhwan.github.io/blob/master/2018/08/01/xss-defence/faild.png?raw=true" alt=""><br>이렇게 스크립트 명령어가 적용 되지 않고</p><p><img src="https://github.com/masterhwan/masterhwan.github.io/blob/master/2018/08/01/xss-defence/success.png?raw=true" alt=""></p><p><img src="https://github.com/masterhwan/masterhwan.github.io/blob/master/2018/08/01/xss-defence/filtered.png?raw=true" alt=""></p><p>이렇게 허용하지 않게 해야한다.</p><p>사용자가 html 태그 기능 써야 한다면 Lucy-XSS Filter<br>단순 텍스트는 Lucy-XSS Preventer<br>주의 사항 : 마지막으로 사용자 입력데이터가 뷰에 다시 노출시킬 목적이 아닌 Business Logic에만 쓰이는 데이터일 경우에는 둘 다 사용하지 말아야 한다. 불필요한 escape/unescape이 발생해 원본데이터가 훼손될 수 있다.</p><p>빠른 시일내에 해야니깐  servlet filter는 보류</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;운 좋게 유지 보수 일을 하게 됬는데 &lt;/p&gt;
&lt;p&gt;크로스 사이트 스크립팅 공격을 예방 해줘야 한다고 한다.&lt;/p&gt;
&lt;p&gt;그래서&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kisa.or.kr/uploadfile/201312/201312161
      
    
    </summary>
    
      <category term="xss" scheme="https://masterhwan.github.io/categories/xss/"/>
    
      <category term="lucy-xss-filter" scheme="https://masterhwan.github.io/categories/xss/lucy-xss-filter/"/>
    
    
  </entry>
  
  <entry>
    <title>vue component</title>
    <link href="https://masterhwan.github.io/2018/07/31/vue-component/"/>
    <id>https://masterhwan.github.io/2018/07/31/vue-component/</id>
    <published>2018-07-31T10:01:50.000Z</published>
    <updated>2018-07-31T12:36:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>2일차 </p><p>뷰 컴포넌트간 데이터 주고 받는 관계가 너무 헷갈리는데?</p><p>vue router, axios, </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2일차 &lt;/p&gt;
&lt;p&gt;뷰 컴포넌트간 데이터 주고 받는 관계가 너무 헷갈리는데?&lt;/p&gt;
&lt;p&gt;vue router, axios, &lt;/p&gt;

      
    
    </summary>
    
      <category term="vue.js" scheme="https://masterhwan.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>vue.js 인스턴스 라이프 사이클 8 단계</title>
    <link href="https://masterhwan.github.io/2018/07/30/vue-life-cycle/"/>
    <id>https://masterhwan.github.io/2018/07/30/vue-life-cycle/</id>
    <published>2018-07-30T12:55:04.000Z</published>
    <updated>2018-07-31T04:10:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>스터디에서 공부용 겸으로 vue.js를 선택했다.</p><p>인스턴트 = 붕어빵 <strong>틀</strong><br>컴포넌트 = <strong>붕어빵</strong><br>인스턴스 생성 명령어는 자바와 같은 <strong>new</strong></p><p>인스턴트 라이프 사이클 속성에는 8가지가 있다. </p><ul><li>인스턴트 생성, beforeCreate, created, beforeMount, mounted, 인스턴트가 화면에 부착, beforeUpdate, updated, 인스턴트 내용 갱싱, beforeDestroy, destroyed, 인스턴트 소멸</li></ul><p>라이프 사이클 훅 : 인스턴트 라이프 사이클 속성에서 실행되는 커스텀 로직을 가르키는 말</p><ul><li><p>beforeCreate : 맨 처음 단계 접근 x</p></li><li><p>created : data, methods 속성에는 접근 할 수 있지만, 인스턴스가 화면에 붙기 전이라 template 속성에 정의된 돔 요소로 접근 x<br><strong>data, methods 속성에 접근 할 수 있는 첫 사이클이자 컴포넌트가 생성되고 나서 실행되는 단계이기 때문에 서버에 데이터를 요청하여 받아오는 로직을 수행하기 좋음</strong></p></li><li><p>beforeMount : render() 함수가 호출되기 직전의 로직을 추가하기 좋음</p></li><li><p>mounted : template 속성에 정의한 화면 요소에 접근 가능<br>화면 요소를 제어하는 로직을 수행하기 좋은 단계.<br>DOM에 인스턴스가 부착되자마자 바로 호출되기 때문에 하위 컴포넌트나 외부 라이브러리에 의해 추가된 화면 요소들이 최종 html 코드로 변환되는 시점과 다들 수 있다.</p></li><li><p>beforeUpdate : 인스턴스에 정의한 속성들이 화면에 치환<br>치환된 값은 반응성을 제공하기 위헤 $watch속성으로 감시 (데이터 관찰)<br>변경 예정인 새 데이터에 접근할 수 있어 변경 예정 데이터의 값과 관련된 로직을 미리 넣을 수 있습니다. 하지만 변경하더라도 화면이 다시 그려지지 않음</p></li><li><p>updated : 데이터가 변경되고 나서 가상 돔으로 다시 화면을 그리고 나면 실행되는 단계<br>데이터 변경 후 화면 요소 제어와 관련된 로직을 추가하기 좋은 단계<br>데이터 변경을 잘못하면 무한 루프에 빠질 수 있다.<br>computed, watch와 같은 속성을 사용해 변경<br>데이터 값을 갱신 하는 로직은 가급적 beforeUpdate에 추가<br>updated에서는 변경 데이터의 화면 요소와 관련된 로직을 추가하는게 좋다</p></li></ul><p>beforeDestroy : 인스턴트가 파괴되기 직전에 호출<br>뷰 인스턴스의 데이터를 삭제하기 좋음</p><p>destroyed : 인스턴트 파괴됨</p><p>출처 : Do it vue.js</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;스터디에서 공부용 겸으로 vue.js를 선택했다.&lt;/p&gt;
&lt;p&gt;인스턴트 = 붕어빵 &lt;strong&gt;틀&lt;/strong&gt;&lt;br&gt;컴포넌트 = &lt;strong&gt;붕어빵&lt;/strong&gt;&lt;br&gt;인스턴스 생성 명령어는 자바와 같은 &lt;strong&gt;new&lt;/stron
      
    
    </summary>
    
      <category term="vue.js" scheme="https://masterhwan.github.io/categories/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>study 2day</title>
    <link href="https://masterhwan.github.io/2018/07/26/study-2day/"/>
    <id>https://masterhwan.github.io/2018/07/26/study-2day/</id>
    <published>2018-07-26T11:20:54.000Z</published>
    <updated>2018-07-27T14:31:16.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="study" scheme="https://masterhwan.github.io/categories/study/"/>
    
    
  </entry>
  
  <entry>
    <title>create jar file with gradle </title>
    <link href="https://masterhwan.github.io/2018/07/25/create-jar-file-with-gradle/"/>
    <id>https://masterhwan.github.io/2018/07/25/create-jar-file-with-gradle/</id>
    <published>2018-07-24T15:20:08.000Z</published>
    <updated>2018-07-25T13:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>공식 gradle 문서와 구글링의 결과로<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes &apos;Implementation-Title&apos;: &apos;Gradle Quickstart&apos;,</span><br><span class="line">                   &apos;Implementation-Version&apos;: version</span><br><span class="line">    &#125;</span><br><span class="line">        from &#123; configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>이렇게 gradle.build 파일에 추가하면 된다고 알아냈다.<br><strong>from</strong> 으로 시작하는 부분은 추가한 dependency 추가하는 방법</p><p>그 다음 gradle jar 명령어를 내리면 프로젝트 폴더내 build/libs 에 ~~.jar  파일이 만들어 진다는데 난 안 만들어져서 따로 jar명령어 이름을 바꾸어서 실행했다.</p><p>이제 build/libs 폴더로 가서</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar xxxxx.jar</span><br></pre></td></tr></table></figure><p>실행 하면 될것 같지만 안된다 ㅋㅋ</p><p><img src="https://user-images.githubusercontent.com/37950033/43149671-ff7e9b6a-8fa2-11e8-8823-7135fb4925de.png" alt="gradle_jar_error"></p><p>이런 에러가 발생한다.</p><p>그래서 프로젝트 루트 패스에서</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradle build task build</span><br></pre></td></tr></table></figure><p> 명령어를 실행 후 새로 생성된 jar 파일을 실행 시키면  완료!</p><p> 출처 : <a href="http://preamtree.tistory.com/69" target="_blank" rel="noopener">http://preamtree.tistory.com/69</a></p><p>추가. </p><p>그냥 gradle build task build만 해도 된다…<br>production 파일마다 test 코드가 없으면 test 에러가 나긴하는데 무시가능</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;공식 gradle 문서와 구글링의 결과로&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="java" scheme="https://masterhwan.github.io/categories/java/"/>
    
      <category term="gradle" scheme="https://masterhwan.github.io/categories/java/gradle/"/>
    
      <category term="jar" scheme="https://masterhwan.github.io/categories/java/gradle/jar/"/>
    
    
  </entry>
  
  <entry>
    <title>프로그래밍 스터디 첫번째</title>
    <link href="https://masterhwan.github.io/2018/07/20/study-1day/"/>
    <id>https://masterhwan.github.io/2018/07/20/study-1day/</id>
    <published>2018-07-19T17:09:39.000Z</published>
    <updated>2018-07-20T08:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>개발자 커뮤티니에서 모인 6명이 오늘 만났다.</p><p>스터디 방향은 스펙업으위 한 방향으로 잡혔다.</p><p>사용 기술</p><ul><li>react, angular, vue.js</li><li>spring boot</li><li>jwt</li></ul><p>프로젝트 내용</p><ul><li>오래된 수강관리 프로그램을 반응형으로 바꾸기</li></ul><p>내가 이 프로젝트에서 가져가야 할 것</p><ul><li>현업에서는 프로젝트를 어떻게 진행하고 완료하는 과정</li></ul><p>다음주에 만나서 논의 하는 것</p><ul><li>다른 프로젝트 아이디어 (있으면)</li><li>프로젝트 설계 (UML, ERD 등)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;개발자 커뮤티니에서 모인 6명이 오늘 만났다.&lt;/p&gt;
&lt;p&gt;스터디 방향은 스펙업으위 한 방향으로 잡혔다.&lt;/p&gt;
&lt;p&gt;사용 기술&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;react, angular, vue.js&lt;/li&gt;
&lt;li&gt;spring boot&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="study" scheme="https://masterhwan.github.io/categories/study/"/>
    
    
  </entry>
  
  <entry>
    <title>jquery 메소드를 js로 바꿔 보자</title>
    <link href="https://masterhwan.github.io/2018/07/11/convert-jquery-to-js/"/>
    <id>https://masterhwan.github.io/2018/07/11/convert-jquery-to-js/</id>
    <published>2018-07-11T04:52:44.000Z</published>
    <updated>2018-07-18T09:50:13.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>jquery</th><th>js</th></tr></thead><tbody><tr><td>$</td><td>구버전 웹브라우저 : documnet.get 시리즈</td></tr><tr><td></td><td>신버전 웹브라우저 : document.querySelector</td></tr><tr><td>.html</td><td>.value</td></tr><tr><td>@ManyToOne</td><td>@DBRef</td></tr><tr><td>@OneToMany</td><td><code></code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;jquery&lt;/th&gt;
&lt;th&gt;js&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;구버전 웹브라우저 : documnet.get 시리즈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RSA encryption</title>
    <link href="https://masterhwan.github.io/2018/07/09/RSA-encryption/"/>
    <id>https://masterhwan.github.io/2018/07/09/RSA-encryption/</id>
    <published>2018-07-09T14:22:00.000Z</published>
    <updated>2018-07-09T14:32:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>웹 어플리케이션 회원가입에 적용하기 위하여 RSA 암호화 기법을 사용해 봄</p><p><img src="https://github.com/masterhwan/masterhwan.github.io/blob/master/2018/07/09/RSA-encryption/rsa-algorithm.png" alt=""></p><p>출처 : <a href="http://www.holaxprogramming.com/2017/06/12/encryption-with-rsa/" target="_blank" rel="noopener">http://www.holaxprogramming.com/2017/06/12/encryption-with-rsa/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;웹 어플리케이션 회원가입에 적용하기 위하여 RSA 암호화 기법을 사용해 봄&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/masterhwan/masterhwan.github.io/blob/master/2018/07/09/RSA-
      
    
    </summary>
    
      <category term="RSA" scheme="https://masterhwan.github.io/categories/RSA/"/>
    
    
  </entry>
  
  <entry>
    <title>mac에 mariadb 설치하기</title>
    <link href="https://masterhwan.github.io/2018/07/02/use-mariadb-in-macOS/"/>
    <id>https://masterhwan.github.io/2018/07/02/use-mariadb-in-macOS/</id>
    <published>2018-07-02T14:20:49.000Z</published>
    <updated>2018-07-03T07:09:34.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>설치 (home brew 설치했다는 가정)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mariadb</span><br><span class="line">또는</span><br><span class="line">$ brew search mariadb로 검색 후 원하는 버전 설치</span><br></pre></td></tr></table></figure></li><li><p>삭제 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew uninstall mariadb</span><br></pre></td></tr></table></figure></li><li><p>mariadb의 default data path</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/var/mysql</span><br></pre></td></tr></table></figure></li><li><p>기본적인 보안 설청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mariadb_secure_installation</span><br></pre></td></tr></table></figure></li></ol><p>루트 비밀번호 설정 후 잊어버리지 않기</p><ol start="6"><li><p>root 말고 다른 계정 만들기</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mariadb 접속후 </span><br><span class="line">GRANT ALL PRIVILEGES ON &quot;지정할 데이터베이스&quot;.* TO &quot;접속아이디 설정&quot;@localhost</span><br><span class="line">IDENTIFIED BY &apos;(비밀번호 설정)&apos; WITH GRANT OPTION;</span><br><span class="line">localhost에서만 유효함</span><br><span class="line"></span><br><span class="line">원격으로 하기 위해서는</span><br><span class="line">GRANT ALL PRIVILEGES ON &quot;지정할 데이터베이스&quot;.* TO &quot;접속아이디 설정&quot;@&apos;%&apos;  or 아이피 주소 지정해주기</span><br><span class="line">IDENTIFIED BY &apos;(비밀번호 설정)&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></li><li><p>sequalpro 사용법 : <strong><a href="https://youtu.be/8IWL0oj24dw?t=11m46s" target="_blank" rel="noopener">여기에서 확인</a></strong></p></li></ol><p>출처 : <a href="https://okky.kr/article/478440" target="_blank" rel="noopener">https://okky.kr/article/478440</a>         </p><p><a href="https://okdevtv.com/mib/mariadb" target="_blank" rel="noopener">https://okdevtv.com/mib/mariadb</a>   </p><p><a href="http://javasampleapproach.com/spring-framework/spring-data/use-spring-jpa-mariadb-spring-boot" target="_blank" rel="noopener">http://javasampleapproach.com/spring-framework/spring-data/use-spring-jpa-mariadb-spring-boot</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;설치 (home brew 설치했다는 가정)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
      <category term="til" scheme="https://masterhwan.github.io/categories/til/"/>
    
    
      <category term="mariaDB" scheme="https://masterhwan.github.io/tags/mariaDB/"/>
    
  </entry>
  
  <entry>
    <title>몽고디비 안전하게 종료하기</title>
    <link href="https://masterhwan.github.io/2018/06/25/safty-end/"/>
    <id>https://masterhwan.github.io/2018/06/25/safty-end/</id>
    <published>2018-06-25T09:24:47.000Z</published>
    <updated>2018-07-02T14:21:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>터미널에서 control + c 종료하면 지정된 db폴더에서 .lock이 생긴다.<br>그대로 mongod을 실행 하면 <code>monogd Detected unclean shutdown</code> 에러가 발생 한다.<br>이 에러를 해결하려먼 .lock파일을 지우고 다시 시작해도 되지만 번거롭다.<br>그래서 db를 종료하기 전에 mongo 콘솔에서<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.shutdownServer()</span><br></pre></td></tr></table></figure></p><p>를 입력하면 된다.<br>아, mongo는 control + c로 종료<br>출처 : <a href="https://blog.outsider.ne.kr/582" target="_blank" rel="noopener">https://blog.outsider.ne.kr/582</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;터미널에서 control + c 종료하면 지정된 db폴더에서 .lock이 생긴다.&lt;br&gt;그대로 mongod을 실행 하면 &lt;code&gt;monogd Detected unclean shutdown&lt;/code&gt; 에러가 발생 한다.&lt;br&gt;이 에러를 해결하려
      
    
    </summary>
    
      <category term="etc" scheme="https://masterhwan.github.io/categories/etc/"/>
    
    
      <category term="mongodb" scheme="https://masterhwan.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>좋은 블로그 발견!</title>
    <link href="https://masterhwan.github.io/2018/06/22/good-blog/"/>
    <id>https://masterhwan.github.io/2018/06/22/good-blog/</id>
    <published>2018-06-22T11:53:23.000Z</published>
    <updated>2018-06-22T11:53:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.lael.be/" target="_blank" rel="noopener">https://blog.lael.be/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.lael.be/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.lael.be/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>어제 스프링 부트 ajax 삽질 한거</title>
    <link href="https://masterhwan.github.io/2018/06/21/post-ajax/"/>
    <id>https://masterhwan.github.io/2018/06/21/post-ajax/</id>
    <published>2018-06-21T12:12:51.000Z</published>
    <updated>2018-06-21T13:52:51.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.answer-write input[type=submit]&quot;).click(addAnswer);</span><br><span class="line">function addAnswer(event) &#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line">var queryString = $(&quot;.answer-write&quot;).serialize();</span><br><span class="line"></span><br><span class="line">var url = $(&quot;.answer-write&quot;).attr(&quot;action&quot;);</span><br><span class="line">console.log(&quot;url : &quot; + url);</span><br><span class="line">console.log(&quot;queryString : &quot; + queryString);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type : &apos;post&apos;,</span><br><span class="line">url : url,</span><br><span class="line">data : queryString,</span><br><span class="line">dataType : &apos;json&apos;,</span><br><span class="line">error : function(data) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">console.log(&apos;failure&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">success : function(data, status) &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">var answerTemplate = $(&quot;#answerTemplate&quot;).html();</span><br><span class="line">var template = answerTemplate.format(data.writer.name, data.time,</span><br><span class="line">data.contents, data.question.id, data.id);</span><br><span class="line">$(&quot;.qna-comment-slipp-articles&quot;).prepend(template);</span><br><span class="line">$(&quot;textarea[name=contents]&quot;).val(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기 기본 자바스크립트가 있다.</p><p>여기서 동작 시키면<br><img src="images/@controller-error.png" alt=""><br>에러가 발생한다. 서버에서 응답 코드도 정상으로 뜨는데 왜 responseText가 html로 와서 끙끙 대다가 answerController가 @RestController가 아니란거 깨달았다.</p><p><img src="images/login-error.png" alt="">이번엔 user/login이라는 값을 계속 보내주는데 이게 어디서 많이 보던가 싶었는데 세션에 저장된 사용자가 없을때 로그인페이지로 보내는 값이였다. json데이터가 아니라 string 타입의 데이터를 계속 보내니 에러가 발생했던 것이였다. 여기서 진짜 해맸다…</p><p><img src="images/success.png" alt=""><br>데이터의 반환형도 수정해주고 하니깐 재데로 적용이 됬다.</p><hr><p>소스파일을 수정하고 컴파일 할 때 마다 로그인이 해제되고 그러다보니 이리저리 해멨나 보다. 피고하기도 하고 집중도 안되고</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="til" scheme="https://masterhwan.github.io/categories/til/"/>
    
    
      <category term="ajax" scheme="https://masterhwan.github.io/tags/ajax/"/>
    
      <category term="jquert" scheme="https://masterhwan.github.io/tags/jquert/"/>
    
      <category term="spring frameword" scheme="https://masterhwan.github.io/tags/spring-frameword/"/>
    
  </entry>
  
  <entry>
    <title>spring framework with mongodb</title>
    <link href="https://masterhwan.github.io/2018/06/19/spring-framework-with-mongodb/"/>
    <id>https://masterhwan.github.io/2018/06/19/spring-framework-with-mongodb/</id>
    <published>2018-06-19T04:26:00.000Z</published>
    <updated>2018-06-19T13:43:26.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>JAP</th><th>MongoDB</th></tr></thead><tbody><tr><td>@Entity</td><td>@Document</td></tr><tr><td>@Column</td><td>@Indexed</td></tr><tr><td>@ManyToOne</td><td>@DBRef</td></tr><tr><td>@OneToMany</td><td><code></code></td></tr></tbody></table><p>19시 까지 하면서 삽질한거 </p><p>DBRef 값을 정해주면 db에서 못 불러 오는 상황이 생김<br>왜그런지는 모르겠고 db값을 정해주지 않으면 괜찮음</p><p><img src="images/dbRef.png" alt=""><br><img src="images/collections.png" alt=""></p><p>DBRef 값은 정해주면 기본일때와 달린 , “테이블 명”이 정해지는데 이것때문에 못 불러 오는거 같다</p><hr><p>인터넷에 정보는 정말 많다 그 중에서 내가 필요헌걸 찾아 내는게 어렵다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JAP&lt;/th&gt;
&lt;th&gt;MongoDB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@Entity&lt;/td&gt;
&lt;td&gt;@Document&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Column&lt;/t
      
    
    </summary>
    
      <category term="til" scheme="https://masterhwan.github.io/categories/til/"/>
    
    
      <category term="mongodb" scheme="https://masterhwan.github.io/tags/mongodb/"/>
    
      <category term="spring framework" scheme="https://masterhwan.github.io/tags/spring-framework/"/>
    
      <category term="mapping" scheme="https://masterhwan.github.io/tags/mapping/"/>
    
  </entry>
  
  <entry>
    <title>LSH and LEA를 공부해 볼 꺼에요~</title>
    <link href="https://masterhwan.github.io/2018/06/18/LSH-and-LEA/"/>
    <id>https://masterhwan.github.io/2018/06/18/LSH-and-LEA/</id>
    <published>2018-06-18T04:16:46.000Z</published>
    <updated>2018-06-18T14:23:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h1><h3 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h3><p>빅데이터, 클라우드 등 고속 환경 및 모바일기기 등 경량 환경에서 기밀성을 제공하기 위해 개발된 128비트 블록암호 알고리즘입니다</p><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><p>개발연도 :2013년<br>알고리즘 구분 : 128비트 블록암호<br>키 길이 : 128비트, 192비트 또는 256비트<br>구조 : ARX(Addition, Rotation, Xor) 기반 GFN(Generalized Feistel Network)</p><h3 id="성능"><a href="#성능" class="headerlink" title="성능"></a>성능</h3><p>다양한 SW 환경에서 국제 표준암호 AES 대비 1.5배 ~ 2배 성능</p><h3 id="내-생각"><a href="#내-생각" class="headerlink" title="내 생각"></a>내 생각</h3><p>aes-128보다는 좋다고 하는걸 보면 256 보단 안 좋나 보다</p><hr><p>암호화 키의 길이는 반드시 16 24 32 바이트;</p><p>뭔가 쉬울줄 알았는데 이게 더어렵다;; 다음에 도전</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LEA&quot;&gt;&lt;a href=&quot;#LEA&quot; class=&quot;headerlink&quot; title=&quot;LEA&quot;&gt;&lt;/a&gt;LEA&lt;/h1&gt;&lt;h3 id=&quot;목적&quot;&gt;&lt;a href=&quot;#목적&quot; class=&quot;headerlink&quot; title=&quot;목적&quot;&gt;&lt;/a&gt;목적&lt;/h3&gt;&lt;p
      
    
    </summary>
    
      <category term="til" scheme="https://masterhwan.github.io/categories/til/"/>
    
    
      <category term="LEA LSH 암호화" scheme="https://masterhwan.github.io/tags/LEA-LSH-%EC%95%94%ED%98%B8%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>fitbit one day</title>
    <link href="https://masterhwan.github.io/2018/06/17/fitbit-one-day/"/>
    <id>https://masterhwan.github.io/2018/06/17/fitbit-one-day/</id>
    <published>2018-06-17T06:11:22.000Z</published>
    <updated>2018-06-19T04:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fitbit-project"><a href="#fitbit-project" class="headerlink" title="fitbit project"></a>fitbit project</h3><ul><li>callback 주소로 code값 받기<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">주소를 요렇게 설정하고</span><br><span class="line">http://localhost:8080/callback</span><br><span class="line"></span><br><span class="line">spring boot에서</span><br><span class="line">@GetMapping(&quot;/callback)</span><br><span class="line">public String callback(String code) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>이렇게 사용</p><p>httpClient를 사용해서 정상적인 메소드 요청이 끝나면 200 코드가 뜬다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CloseableHttpResponse response = httpclient.execute(httpPost);</span><br><span class="line">EntityUtils.toString(response.getEntity, &quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure></p><p>로 인코딩을 해주고 다시 json으로 파싱해서 사용하면 된다.</p><p><a href="https://github.com/masterhwan/fitbit/tree/master/src/test/java/com/example/demo" target="_blank" rel="noopener">https://github.com/masterhwan/fitbit/tree/master/src/test/java/com/example/demo</a></p><p>client_id와 client_secret을 자기것으로 바꿔주면 된다.</p><hr><p>자바에서 외부 주소로 요청을 보낼때 <strong><a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/fundamentals.html#d5e80" target="_blank" rel="noopener">HttpClient</a></strong> 사용</p><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><ul><li>-x: GET, POST와 같은 메서드 방식</li><li>-h: http 헤더파일 데이터</li><li>-d: query 데이터 </li></ul><hr><p>참고 : </p><p><a href="https://okky.kr/article/290007" target="_blank" rel="noopener">https://okky.kr/article/290007</a></p><p><a href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/fundamentals.html#d5e80" target="_blank" rel="noopener">http://hc.apache.org/httpcomponents-client-ga/tutorial/html/fundamentals.html#d5e80</a></p><p><a href="http://eddyplusit.tistory.com/51" target="_blank" rel="noopener">http://eddyplusit.tistory.com/51</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;fitbit-project&quot;&gt;&lt;a href=&quot;#fitbit-project&quot; class=&quot;headerlink&quot; title=&quot;fitbit project&quot;&gt;&lt;/a&gt;fitbit project&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;callback 주소로 cod
      
    
    </summary>
    
      <category term="fitbit" scheme="https://masterhwan.github.io/categories/fitbit/"/>
    
    
      <category term="fitbit" scheme="https://masterhwan.github.io/tags/fitbit/"/>
    
      <category term="curl" scheme="https://masterhwan.github.io/tags/curl/"/>
    
      <category term="Authorization" scheme="https://masterhwan.github.io/tags/Authorization/"/>
    
      <category term="Header" scheme="https://masterhwan.github.io/tags/Header/"/>
    
      <category term="Authorization token" scheme="https://masterhwan.github.io/tags/Authorization-token/"/>
    
      <category term="Access Token Request" scheme="https://masterhwan.github.io/tags/Access-Token-Request/"/>
    
  </entry>
  
  <entry>
    <title>스프링 부트랑 몽고DB랑 연결하기</title>
    <link href="https://masterhwan.github.io/2018/06/17/spring-boot-connect-mongoDB/"/>
    <id>https://masterhwan.github.io/2018/06/17/spring-boot-connect-mongoDB/</id>
    <published>2018-06-17T01:57:01.000Z</published>
    <updated>2018-06-19T04:28:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>먼저 컴퓨터에 mongodb가 설치 됐는지 확인<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --verion</span><br></pre></td></tr></table></figure></p><p>설치가 안됐으면 설치하고</p><p>몽고db는 mongod, mongo 두 개가 같이 실행되야 사용 할 수 있다.<br>먼저 mongod 부터 설정<br>mongod는 기본적으로 root/data/db에 있는 데이터를 참고한다.<br>기본 설정을 사용 할 거면<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db</span><br></pre></td></tr></table></figure></p><p>디렉토리를 생성해 준다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod</span><br></pre></td></tr></table></figure></p><p>로 몽고 데몬을 실행 시킨다.<br>원하는 디렉토리에 몽고db를 사용하고 싶은 사람은<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath &quot;경로&quot;</span><br></pre></td></tr></table></figure></p><p>로 정해주면 된다.</p><p>Failed to set up listener: SocketException: Address already in use 에러 발생하는 사람은 <strong><a href="https://stackoverflow.com/questions/47975929/socketexception-address-already-in-use-mongodb" target="_blank" rel="noopener">여기</a></strong> 참고</p><p>이제 스프링 부트를 켜서 예제 파일을 실행 해보고 잘 되는지 확인<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package hello;</span><br><span class="line"></span><br><span class="line">import org.springframework.data.annotation.Id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Customer &#123;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    public String id;</span><br><span class="line"></span><br><span class="line">    public String firstName;</span><br><span class="line">    public String lastName;</span><br><span class="line"></span><br><span class="line">    public Customer() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Customer(String firstName, String lastName) &#123;</span><br><span class="line">        this.firstName = firstName;</span><br><span class="line">        this.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return String.format(</span><br><span class="line">                &quot;Customer[id=%s, firstName=&apos;%s&apos;, lastName=&apos;%s&apos;]&quot;,</span><br><span class="line">                id, firstName, lastName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package hello;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"></span><br><span class="line">public interface CustomerRepository extends MongoRepository&lt;Customer, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public Customer findByFirstName(String firstName);</span><br><span class="line">    public List&lt;Customer&gt; findByLastName(String lastName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package hello;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.CommandLineRunner;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application implements CommandLineRunner &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private CustomerRepository repository;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run(String... args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">repository.deleteAll();</span><br><span class="line"></span><br><span class="line">// save a couple of customers</span><br><span class="line">repository.save(new Customer(&quot;Alice&quot;, &quot;Smith&quot;));</span><br><span class="line">repository.save(new Customer(&quot;Bob&quot;, &quot;Smith&quot;));</span><br><span class="line"></span><br><span class="line">// fetch all customers</span><br><span class="line">System.out.println(&quot;Customers found with findAll():&quot;);</span><br><span class="line">System.out.println(&quot;-------------------------------&quot;);</span><br><span class="line">for (Customer customer : repository.findAll()) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">// fetch an individual customer</span><br><span class="line">System.out.println(&quot;Customer found with findByFirstName(&apos;Alice&apos;):&quot;);</span><br><span class="line">System.out.println(&quot;--------------------------------&quot;);</span><br><span class="line">System.out.println(repository.findByFirstName(&quot;Alice&quot;));</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Customers found with findByLastName(&apos;Smith&apos;):&quot;);</span><br><span class="line">System.out.println(&quot;--------------------------------&quot;);</span><br><span class="line">for (Customer customer : repository.findByLastName(&quot;Smith&quot;)) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>공홈에서 제공하는 예제 코드라 컴파일에는 이상이 없다.</p><p>터미널에서<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure></p><p>를 실행하고 mongo명령어를 이용해서 잘 저장됬는지 확인 해보자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.customer.find(&#123;firstName : Alice&#125;)</span><br></pre></td></tr></table></figure></p><p><img src="images/alice.png" alt=""></p><p>더 자세히 알아보기 : </p><ul><li>spring docs : <a href="https://spring.io/guides/gs/accessing-data-mongodb/" target="_blank" rel="noopener">https://spring.io/guides/gs/accessing-data-mongodb/</a> </li><li>mongoDB docs : <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;먼저 컴퓨터에 mongodb가 설치 됐는지 확인&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/t
      
    
    </summary>
    
      <category term="til" scheme="https://masterhwan.github.io/categories/til/"/>
    
    
      <category term="mongodb" scheme="https://masterhwan.github.io/tags/mongodb/"/>
    
      <category term="spring-boot" scheme="https://masterhwan.github.io/tags/spring-boot/"/>
    
  </entry>
  
</feed>
