<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-27T11:53:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20181027</title>
    <link href="http://yoursite.com/2018/10/27/20181027/"/>
    <id>http://yoursite.com/2018/10/27/20181027/</id>
    <published>2018-10-27T11:52:47.000Z</published>
    <updated>2018-10-27T11:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>알고리즘 셤  = 탈락</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;알고리즘 셤  = 탈락&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="알고리즘" scheme="http://yoursite.com/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>20181026</title>
    <link href="http://yoursite.com/2018/10/26/20181026/"/>
    <id>http://yoursite.com/2018/10/26/20181026/</id>
    <published>2018-10-26T02:21:37.000Z</published>
    <updated>2018-10-27T06:25:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="책-스프링부트로-배우는-웹-개발-알고리즘-문제-해결-전략"><a href="#책-스프링부트로-배우는-웹-개발-알고리즘-문제-해결-전략" class="headerlink" title="책 :스프링부트로 배우는 웹 개발 | 알고리즘 문제 해결 전략"></a>책 :<a href="http://www.yes24.com/24/goods/61793313" target="_blank" rel="noopener">스프링부트로 배우는 웹 개발</a> | <a href="http://www.yes24.co.kr/24/goods/8006522" target="_blank" rel="noopener">알고리즘 문제 해결 전략</a></h1><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><ul><li>API문서화 : Swagger<ul><li>web 개발하기 전에 추가하기</li></ul></li><li>RestTemplate<ul><li>REST API와 연동 시에는 HTTP 요청을 보내는 것 뿐만 아니라 실제로 응답에 JSON데이터를 파싱하고 모델 객체와 매핑하는 것이 중유</li></ul></li><li>UtiComponentBuilder<ul><li>다양한 API와 URL을 매핑하기 위해서 문자열로 조합하다 보면 가독성이 떨어져서 유지보수가 힘들다.</li><li>Builder 방식으로 uri를 만드는데 필요한 정보들을 메서드를 이용해 만들수 있고, 인코딩도 가능하다.</li><li>RestTemplate을 이용해서 POST 방식으로 데이터를 요청할 때에는 MultiValueMap을 사용해서 데이터를 전달해야하는데, UriComponentBuilder는 자동으로 변환한다.</li></ul></li><li>HTTP 메서드별 RestTemplate 메서드 명세<br>  |메서드명| HTTP 호출방식 | 변환 타입|<br>  |—|—|—|<br>  |getForObject| GET | Object|<br>  |getForEntity| GET | HttpResponseEntity|<br>  |postForObject| POST | Object |<br>  |postForEntity| POST | HttpResponseEntity |<br>  |delete| DELETE | - |<br>  |put| PUT | -|<br>  |exchange| user-define | user-define|</li><li>Rest와 관련된 RestController, RestTemplate, UriComponentBuilder, ResponseEntity<br><a href="https://github.com/be4ter/intellij-projects/tree/practice-rest" target="_blank" rel="noopener">참고</a><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2></li><li><p>ORM : Object와 Relation 간의 불일치 문제를 해결하기 위한 도구.</p><pre><code>자바에서는 JDBC API로 데이터베이스 제어가 가능하지만 ORM을 사용하는 이유는 로직 처리를 SQL로 하게 되고, 자바의 언어적인 기능을 사용하기 보다는 쿼리와 결과를 매핑하는 용도로 사용하게 되기 때문에</code></pre></li><li><p>spring data : NOSQL, RDBMS 어느 한쪽만을 목표로 하지                        않으므로 추상화된 인터페이스를 통해 다양한 저장소를                 활용할 수 있다.</p></li><li><p>자바 제네릭에서 Type 표기 약어의 의미</p><ul><li>E : Element(요소를 의미)</li><li>K : Key(키를 의미)</li><li>N : Number(숫자를 의미)</li><li>T : Type(타입을 의미)</li><li>V : Value(값을 의미)</li></ul></li><li><p>@ManyToOne의 fetch 기본값은 EAGER(즉시 로딩)이므로 성능 향상을 위해 FetchType.LAZY(지연 로딩)으로 설정해주는게 좋다.</p></li><li><p>mapperBy : jpa 연관 관계에서 주인을 명시하기 위해 사용한다.<br>연관 관계의 주인은 다수 쪽이다.</p></li><li><p>QueryDSL : 다음에</p></li><li>Mybatis <ul><li>쿼리 매핑을 위해 sqlSession 객체 사용, sqlSession객체 생성에 sqlSessionFactory를 사용, spring과 같이 사용할때는 SqlSessionTemplate 사용 : 예외 처리를 spring에 DataAcessException으로 치환 시키기 때문에</li><li>‘%{}%’ 비슷한것 검색</li><li>#{} 한개 검색</li></ul></li><li>DataBase Connection Pool : 여러사람이 DB서버에 요청할 때마다 커넥션을 생성하면 서버 컴퓨터가 견디지 못해서 사용</li><li>Mybatis에서는 동적 SQL을 지원하지만 서비스 클래스에서 조건문을 활용해 먼저 처리하는 것이 좋다.<br><a href="https://github.com/be4ter/intellij-projects/tree/practice-db" target="_blank" rel="noopener">참고</a></li></ul><h2 id="프로그래밍을-위한-여섯-단계-문제-해결-알고리즘"><a href="#프로그래밍을-위한-여섯-단계-문제-해결-알고리즘" class="headerlink" title="프로그래밍을 위한 여섯 단계 문제 해결 알고리즘"></a>프로그래밍을 위한 여섯 단계 문제 해결 알고리즘</h2><pre><code>1. 문제를 읽고 이해한다.2. 문제를 익숙한 용어로 재정의한다.3. 어떻게 해결할지 계획을 세운다.4. 계획을 검증한다.5. 프로그램으로 구현한다.6. 어떻게 풀었는지 돌아보고, 개선할 방법이 있는지 찾아본다.</code></pre><h2 id="좋은코드를-작성하기-위한-원칙"><a href="#좋은코드를-작성하기-위한-원칙" class="headerlink" title="좋은코드를 작성하기 위한 원칙"></a>좋은코드를 작성하기 위한 원칙</h2><pre><code>1. 간결한 코드 작성2. 적극적으로 코드 재사용 하기    - 같은 코드가 세번 이상 등장하면 생각해보기3. 표준 라이브러리 공부하기4. 항상 같은 형태로 프로그램 작성하기5. 일관적이고 명료한 명명법 사용하기7. 모든 자료를 정규화해서 저장하기    - 클래스 생성자에서 정규화 수행6. 코드와 데이터를 분리하기</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;책-스프링부트로-배우는-웹-개발-알고리즘-문제-해결-전략&quot;&gt;&lt;a href=&quot;#책-스프링부트로-배우는-웹-개발-알고리즘-문제-해결-전략&quot; class=&quot;headerlink&quot; title=&quot;책 :스프링부트로 배우는 웹 개발 | 알고리즘 문제 해
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>20181025</title>
    <link href="http://yoursite.com/2018/10/25/20181025/"/>
    <id>http://yoursite.com/2018/10/25/20181025/</id>
    <published>2018-10-25T04:07:19.000Z</published>
    <updated>2018-10-25T07:21:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>다시 블로그 시작</li></ul><h2 id="책-스프링부트로-배우는-웹-개발"><a href="#책-스프링부트로-배우는-웹-개발" class="headerlink" title="책 :스프링부트로 배우는 웹 개발"></a>책 :<a href="http://www.yes24.com/24/goods/61793313" target="_blank" rel="noopener">스프링부트로 배우는 웹 개발</a></h2><p>##1</p><ul><li>웹 서버 : html파일 같은 정적 파일들을 전달해 주는 역할을 하는 서버</li><li>웹 어플리케이션 컨테이너 = 웹 어플리케이션 서버<ul><li>php,jsp,asp,js 등 언어들 사용해서 동적인 페이지들이 생성 가능한 서버</li></ul></li><li>클래스 로더 : JVM에 class를 loading 한다<ul><li>계층 구조 : Bootstrap (최상위)-&gt; Extension -&gt; System -&gt; User-Define Class loader (최하위)</li><li>Bootstrap Class loader :  &lt;JAVA_HOME&gt;/jre/lib에 위치한 자바 핵심 라이브러리를 로딩</li><li>Extension Class loader : &lt;JAVA_HOME&gt;/jre/lib/ext또는 java.ext.dirs 시스템 속성에 지정된 기타 디렉터리의 코드를 로딩</li><li>System Class loader : ClassPath 환경변수에 매핑</li><li><a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94_%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A1%9C%EB%8D%94</a></li></ul></li><li>쿠키(Cookie) : 클라이언트의 상태 관리</li><li>세션(Session) : 서버의 상태 관리<br>##2</li><li>자바 웹 개발에서 IoC가 인기를 끄는 이유<ul><li>프로그램의 생명주기에 대한 주도권이 웹 애플리케이션 컨테이너에 있기 때문에</li></ul></li><li>IoC <ul><li>하이레벨 모듈은 로우레벨 모듈에 의존해서는 안 되고, 모두 인터페이스에 의존해야 한다.</li><li>추상화는 세부 사항에 의존해서는 안된다. 세부 사항이 추상화에 의존해야 한다.</li><li>= 인터페이스를 사용해 결합도 낮추는것이 목적</li><li>하지만 인터페이스 구현체가 필요해 완전히 분리할수 없다.</li><li>인스턴스화할 수 있는 코드에 대한 의존성을 해결하는 것이 <strong>의존성 주입</strong>이다.</li><li>인터셉터 : @Controller가 요청을 처리하기 전, 후에 대해 로직 추가 할수 있다<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2></li></ul></li><li>REST(Representational State Transfer) : 분산 네트워크 프로그래밍의 아키텍쳐 스타일, 로이 필딩이 처음 제안</li><li>특징<ul><li>클라이언트/서버 : 클라이언트와 서버가 독립적으로 구분되어야하고,<br>서버 또는 클라이언트 증설 시에 서로간의 의존성 때문에 확장에 문제가 되는 일이 없어야 한다.</li><li>무상태성 : 클라이언트와 서버 간의 통신에 상태가 없어야한다. 서버는 클라이언트 상태를 기억할 필요가 없다.</li><li>계층형 구조 : 서버와 클라이언트 사이에 게이트웨어, 방화벽, 프록시가 있는 것처럼 다계층 형태로 레이어를 추가하거나 수정하거나 제거할 수있고 확장성이 있어야 한다.</li><li>캐시 : 서버의 응답들은 캐시르 가지고 있거나 없거나 둘 중의 하나인데, 캐시를 가지고 있을 경우에는 클라이언트가 캐시를 통해서 응답을 재사용할 수 있고 이를 통해서 서버의 부하를 낮추어서 서버의 성능이 향상될 수 있다.</li><li>코드 온 디멘드 : 요청이 오면 코드를 준다는 의미로 특정 시점에 서버가 특정 기능을 수행하는 스크립트 또는 플러그인을 클라이언트에 전달해서 해당 기능을 동작하도록 하는 것이다. 예로는 애플릿, 자바스크립트, 플래시가 있다.</li><li>통합 인터페이스 : 서버와 클라이언트 간의 상호 작용은 일관된 인터페이스들 위에서 이뤄져야 한다. 그 내용은 아래와 같다.<ul><li>인터페이스 규칙<ul><li>리소스 식별 : 웹 안에서 서로 구분할 수 있는 개념으로 URI와 같은 고유 시별자를 통해 표현할 수 있다.</li><li>표현을 통한 리소스 처리 : 같은 데이터에 대해서 표현할 때 JSON, XML, HTML 페이지와 같이 다양한 콘텐츠 유형으로 표현할 수 있다. 그렇지만 데이터는 변경되지 않는다.</li><li>자기 묘사 메세지 : HTTP 통신을 할 때도 Header에 메타 데이터 정보를 추가해서 실제 데이터와는 관련 없지만 데이터에 대한 설명을 나타내는 정보를 담을수 있다.</li><li>애플리케이션의 상태에 대한 하이퍼미디어(HATEOS) : 웹은 여러 페이지들과 그 페이지들이 이동할 수있는 링크 정보들로 구성되어 있다. REST API를 개발할 때도 단순히 데이터만 전달하지 않고 링크 정보까지 포함한다면 좀 더 웹에 친숙한 REST API가 될 것이다.</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;다시 블로그 시작&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;책-스프링부트로-배우는-웹-개발&quot;&gt;&lt;a href=&quot;#책-스프링부트로-배우는-웹-개발&quot; class=&quot;headerlink&quot; title=&quot;책 :스프링부트로 배우는 웹 개발&quot;&gt;&lt;/a&gt;책 :&lt;
      
    
    </summary>
    
    
      <category term="til" scheme="http://yoursite.com/tags/til/"/>
    
  </entry>
  
</feed>
